git class 05
-----------Branches------------------
1. We need branches to avoid conflicts in every commit
2. We need branches in other to avoid messing up the main branch

Scenario:
A company wants to develop a solar system.

Requirements:
Develop a solar system basic operational model and deploy it.

Anna:
Approach :
1. Write the code
2. Test it and commit it in the local repo
3. push the code to github
4. add the feature and test it
5. merge your branch to main on your local
6. update the remote.

---------------------------------------------
check if your branch is up to date with the github

git fetch--> checks if there is any update on the github in any branch
if there is an update, it will tell you the branch name in which there is an update
if there is no update, it will simply output nothing.

git fetch doesn't pull/updates the code, it just checks
in other to pull the update ---> git pull.


git branch ----> tells you your current branch.

git branch branchName --> to create a new branch
git checkout branchName --> to switch to the new branch.


------------------------------------------------------------------

While working on feature sun, Dana has an error in the code.
now in order to solve this error, she doesn't want to mess up other features that are working fine.

so what should she do in order to preserve what is working fine and then work on the issue.

Solution:

1. create a separate branch and resolve the issue in that branch.
2. make sure the right branch is there and commit to it.

When you have fixed the issue in the branch that you created:


In order to merge after you have made the fix:

1. Switch to the branch you want to merge your resolved issue or code to
2. Use the command; git merge branchName --> where branchName is the name of the branch you want to merge




















